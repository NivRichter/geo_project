{"version":3,"sources":["assets/venue_location_icon.svg","components/VenueLocationIcon.js","components/MarkerPopup.js","components/VenueMarkers.js","components/MapView.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VenueLocationIcon","L","icon","iconUrl","require","iconRetinaUrl","iconAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","className","MarkerPopup","props","data","name","description","Popup","VenueMarkers","tlv","bs","showBS","showTLV","markersTLV","map","venue","i","Marker","key","position","geometry","markersbs","MapView","useState","currentLocation","lat","lng","zoom","state","setState","location","useLocation","history","useHistory","useEffect","latitude","longitude","console","log","concat","replace","pathname","Container","fluid","Row","Col","role","aria-label","Button","onClick","Map","center","TileLayer","url","attribution","Home","navigator","geolocation","getCurrentPosition","coords","error","code","message","enableHighAccuracy","to","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.87fc6f3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/venue_location_icon.2ceaf661.svg\";","import L from \"leaflet\";\n\nexport const VenueLocationIcon = L.icon({\n  iconUrl: require(\"../assets/venue_location_icon.svg\"),\n  iconRetinaUrl: require(\"../assets/venue_location_icon.svg\"),\n  iconAnchor: null,\n  shadowUrl: null,\n  shadowSize: null,\n  shadowAnchor: null,\n  iconSize: [35, 35],\n  className: \"leaflet-venue-icon\",\n});\n","import React from \"react\";\nimport { Popup } from \"react-leaflet\";\n\nconst MarkerPopup = (props) => {\n  const { name,description } = props.data;\n  return (\n    <Popup>\n      <div>{name} </div>\n      <div> {description}</div>\n    </Popup>\n  );\n};\n\nexport default MarkerPopup;\n","import React from \"react\";\nimport { Marker } from \"react-leaflet\";\nimport { VenueLocationIcon } from \"./VenueLocationIcon\";\nimport MarkerPopup from \"./MarkerPopup\";\n\nconst VenueMarkers = (props) => {\n  const { tlv,bs,showBS,showTLV } = props;\n  const markersTLV = tlv.map((venue, i) => (\n    <Marker key={i} position={venue.geometry} icon={VenueLocationIcon}>\n      <MarkerPopup data={venue} />\n    </Marker>\n  ));\n\n  const markersbs = bs.map((venue, i) => (\n    <Marker key={i} position={venue.geometry} icon={VenueLocationIcon}>\n      <MarkerPopup data={venue} />\n    </Marker>\n  ));\n  return <>{showTLV? markersTLV : null}\n  {showBS? markersbs: null}</>;\n};\n\nexport default VenueMarkers;\n","import React, { useState, useEffect } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport data from \"../assets/data.json\";\nimport Markers from \"./VenueMarkers\";\nimport { Button, Container,Row,Col } from 'react-bootstrap';\n\n\nimport { useLocation, useHistory } from \"react-router-dom\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst MapView = (props) => {\n  const [state, setState] = useState({\n    currentLocation: { lat: 32.0429994 , lng: 34.7661248  },\n    zoom: 8,\n    data,\n    showTLV:true,\n    showBS:true,\n  });\n\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (location.state.latitude && location.state.longitude) {\n      const currentLocation = {\n        lat: location.state.latitude,\n        lng: location.state.longitude,\n      };\n      console.log(state);\n      setState({\n        ...state,\n        data: {\n          tlv: state.data.tlv.concat({\n            name: \"new\",\n            geometry: [currentLocation.lat, currentLocation.lng],\n          }),\n          bs: state.data.bs.concat({\n            name: \"new\",\n            geometry: [currentLocation.lat, currentLocation.lng],\n          }),\n        },\n        currentLocation,\n      });\n      history.replace({\n        pathname: \"/map\",\n        state: {},\n      });\n    }\n  }, [location]);\n\n  return (\n      <Container fluid  className=\"text-light bg-blue py-3\">\n          <Row>\n            <Col>\n              <h1>\n                <span> שומרים על הבניינים לשימור</span>\n                <span role=\"img\" aria-label=\"אוהל\" className=\"mx-1\">\n                  \n                </span>\n\n              </h1>\n              <h2>ריכוז מאגרי מידע על מבנים לשימור במדינת ישראל</h2>\n            </Col>\n          </Row>\n        <Row>\n          <Col>\n          <h2>\n              תלחצי עלינו\n\n              </h2>\n            <Button onClick = {()=>setState({...state, showTLV: !state.showTLV})}>\n              תל אביב\n              </Button>\n              <Button onClick =  {()=>setState({...state, showBS: !state.showBS})}>\n              לוס-אנג'ס\n              </Button>\n     \n          </Col>\n        </Row>\n        <Row>\n          <Col>\n          \n    <Map center={state.currentLocation} zoom={state.zoom}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <Markers tlv={state.data.tlv} bs = {state.data.bs}  showTLV = {state.showTLV} showBS={state.showBS}/>\n    </Map>\n          </Col>\n        </Row>\n      </Container>\n\n\n  );\n};\n\nexport default MapView;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  const [state, setState] = useState({\n    longitude: 0,\n    latitude: 0,\n  });\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      function (position) {\n        // console.log(position);\n        setState({\n          longitude: position.coords.longitude,\n          latitude: position.coords.latitude,\n        });\n      },\n      function (error) {\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n      },\n      {\n        enableHighAccuracy: true,\n      }\n    );\n  }, []);\n\n  return (\n    <div>\n      <h1>Geolocation</h1>\n      <p>Latitude: {state.latitude}</p>\n      <p>longitude: {state.longitude}</p>\n\n      <Link\n        to={{\n          pathname: \"/map\",\n          // state: {\n          //   hello: 'world'\n          // }\n          state,\n        }}\n      >\n        See marker\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport MapView from \"./components/MapView\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/map\">\n          <MapView />;\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}