[{"C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\index.js":"1","C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\App.js":"2","C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\reportWebVitals.js":"3","C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\buildings\\Buildings.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":2470,"mtime":1611255396069,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":6859,"mtime":1611255308402,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"14cqtpw",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\index.js",[],["20","21"],"C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\App.js",[],"C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\reportWebVitals.js",[],"C:\\Users\\NivRi\\personal_projects\\mini_geo_project\\geo-app\\src\\buildings\\Buildings.js",["22","23","24","25","26","27","28","29","30","31","32","33","34","35","36"],"import React, { Component } from \"react\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ToggleButton,\r\n  ButtonGroup,\r\n} from \"react-bootstrap\";\r\nimport Fuse from \"fuse.js\";\r\n\r\nclass Buildings extends Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n    tlv:true,\r\n    Jerusalem:false,\r\n      value: \"\",\r\n      view: true,\r\n      jsonData: {},\r\n      picturesDB: {},\r\n      avilableSites: {},\r\n      selectedDay: undefined,\r\n      formatDate: \"\",\r\n      locale: \"he\",\r\n\r\n      suggestions: [],\r\n      chosen_park: \"\",\r\n      input: \"\",\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.initData();\r\n    this.getAllSitesName();\r\n  }\r\n\r\n  initData() {\r\n    // console.log(\"init data\");\r\n    let url = `https://checkfrontcom.checkfront.com/api/3.0/item`;\r\n    fetch(url, {\r\n      method: \"GET\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        this.setState({ picturesDB: data.items }, function () {\r\n          this.getAllSitesName();\r\n        })\r\n      );\r\n  }\r\n\r\n  getAllSitesName() {\r\n    const sitesData = this.state.picturesDB;\r\n    let names = [];\r\n    for (let item_id in sitesData) {\r\n      names = names.concat([sitesData[item_id][\"name\"]]);\r\n    }\r\n    this.setState({ suggestions: names });\r\n  }\r\n\r\n\r\n\r\n  async getData() {\r\n    //await this.getPicturesData()\r\n    const selectedDay = this.state.formatDate; //let url = \"https://checkfrontcom.checkfront.com/api/3.0/item/cal?item_id=40,14,77&start_date=20201024&end_date=20201025\"\r\n    let url = `https://checkfrontcom.checkfront.com/api/3.0/item/cal?start_date%20=${selectedDay}&end_date=${selectedDay}`;\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      mode: \"cors\",\r\n      cache: \"no-cache\",\r\n      credentials: \"same-origin\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ jsonData: data }, () =>\r\n          this.setState(\r\n            { avilableSites: this.getAvailabeSites(), view: true },\r\n            this.showAvailableSites\r\n          )\r\n        );\r\n      });\r\n  }\r\n\r\n  showAvailableSites() {\r\n    const sites = this.state.avilableSites;\r\n  }\r\n\r\n  convertRegionID2Name(id) {\r\n    switch (id) {\r\n      case 56:\r\n        return \"north\";\r\n      case 57:\r\n        return \"center\";\r\n      case 58:\r\n        return \"Jerusalem\";\r\n      case 59:\r\n        return \"south\";\r\n      default:\r\n        return \"center\";\r\n    }\r\n  }\r\n\r\n\r\n\r\n  formatDate(date) {\r\n    var d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n    return [year, month, day].join(\"\");\r\n  }\r\n\r\n  formatIsraeliDate(date) {\r\n    var d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n    return [day, month, year].join(\"/\");\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ input: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    let avilableSites = this.state.avilableSites;\r\n    let sitesTable = { north: [], center: [], Jerusalem: [], south: [] };\r\n    let checkedN = this.state.tlv;\r\n    let checkedJ = this.state.Jerusalem;\r\n    let checkedC = this.state.center;\r\n    let checkedS = this.state.south;\r\n    let parks_names = [];\r\n    const today = new Date();\r\n    const fortnightAway = new Date(Date.now() + 12096e5);\r\n    let input = this.state.input;\r\n\r\n\r\n\r\n    const fuseNorth = new Fuse(sitesTable[\"north\"], {\r\n      keys: [\"name\"],\r\n      threshold: 0.5,\r\n    });\r\n    const fuseCenter = new Fuse(sitesTable[\"center\"], {\r\n      keys: [\"name\"],\r\n      threshold: 0.5,\r\n    });\r\n    const fuseJerusalem = new Fuse(sitesTable[\"Jerusalem\"], {\r\n      keys: [\"name\"],\r\n      threshold: 0.5,\r\n    });\r\n    const fuseSouth = new Fuse(sitesTable[\"south\"], {\r\n      keys: [\"name\"],\r\n      threshold: 0.5,\r\n    });\r\n\r\n    return (\r\n\r\n        <Container fluid className=\"bg-teva-sand\">\r\n          <Row>\r\n            <Col>\r\n\r\n                              <div>\r\n                                <h4 className=\"d-block\">סינון לפי איזור:</h4>\r\n                              </div>\r\n                              <ButtonGroup toggle className=\"my-2 d-flex\">\r\n                                <ToggleButton\r\n                                  className=\"Btn-region\"\r\n                                  type=\"checkbox\"\r\n                                  variant=\"secondary\"\r\n                                  checked={checkedN}\r\n                                  value=\"1\"\r\n                                  onChange={(e) => this.setState({\r\n                                        first: false,\r\n                                        tlv: true,\r\n                                        Jerusalem: false,\r\n                                        center: false,\r\n                                        south: false,\r\n                                        })\r\n                                  }\r\n                                >\r\n                                  <a className=\"region\">תל אביב</a>\r\n                                </ToggleButton>\r\n\r\n                                <ToggleButton\r\n                                  className=\"Btn-region\"\r\n                                  type=\"checkbox\"\r\n                                  variant=\"secondary\"\r\n                                  checked={checkedJ}\r\n                                  value=\"2\"\r\n                                  onChange={(e) =>\r\n                                    this.setState({\r\n                                        first: false,\r\n                                        tlv: false,\r\n                                        Jerusalem: true,\r\n                                        center: false,\r\n                                        south: false,\r\n                                        })\r\n                                  }\r\n                                >\r\n                                  <a className=\"region\"> ירושלים</a>\r\n                                  </ToggleButton>\r\n\r\n  \r\n                              </ButtonGroup>\r\n\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n              <Col>\r\n              {this.state.tlv ? \r\n              <iframe src=\"https://www.google.com/maps/d/u/0/embed?mid=1fpJk0jT_swhxwqLNMy9DkY6Bc0zzXGWJ\" width=\"640\" height=\"480\"></iframe>\r\n                : <h2> מה נשמע אלונה?</h2>}\r\n              </Col>\r\n          </Row>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buildings;",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":90,"column":11,"nodeType":"43","messageId":"44","endLine":90,"endColumn":16},{"ruleId":"41","severity":1,"message":"45","line":137,"column":9,"nodeType":"43","messageId":"44","endLine":137,"endColumn":22},{"ruleId":"41","severity":1,"message":"46","line":141,"column":9,"nodeType":"43","messageId":"44","endLine":141,"endColumn":17},{"ruleId":"41","severity":1,"message":"47","line":142,"column":9,"nodeType":"43","messageId":"44","endLine":142,"endColumn":17},{"ruleId":"41","severity":1,"message":"48","line":143,"column":9,"nodeType":"43","messageId":"44","endLine":143,"endColumn":20},{"ruleId":"41","severity":1,"message":"49","line":144,"column":11,"nodeType":"43","messageId":"44","endLine":144,"endColumn":16},{"ruleId":"41","severity":1,"message":"50","line":145,"column":11,"nodeType":"43","messageId":"44","endLine":145,"endColumn":24},{"ruleId":"41","severity":1,"message":"51","line":146,"column":9,"nodeType":"43","messageId":"44","endLine":146,"endColumn":14},{"ruleId":"41","severity":1,"message":"52","line":150,"column":11,"nodeType":"43","messageId":"44","endLine":150,"endColumn":20},{"ruleId":"41","severity":1,"message":"53","line":154,"column":11,"nodeType":"43","messageId":"44","endLine":154,"endColumn":21},{"ruleId":"41","severity":1,"message":"54","line":158,"column":11,"nodeType":"43","messageId":"44","endLine":158,"endColumn":24},{"ruleId":"41","severity":1,"message":"55","line":162,"column":11,"nodeType":"43","messageId":"44","endLine":162,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":192,"column":35,"nodeType":"58","endLine":192,"endColumn":57},{"ruleId":"56","severity":1,"message":"57","line":211,"column":35,"nodeType":"58","endLine":211,"endColumn":57},{"ruleId":"59","severity":1,"message":"60","line":223,"column":15,"nodeType":"58","endLine":223,"endColumn":132},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'sites' is assigned a value but never used.","Identifier","unusedVar","'avilableSites' is assigned a value but never used.","'checkedC' is assigned a value but never used.","'checkedS' is assigned a value but never used.","'parks_names' is assigned a value but never used.","'today' is assigned a value but never used.","'fortnightAway' is assigned a value but never used.","'input' is assigned a value but never used.","'fuseNorth' is assigned a value but never used.","'fuseCenter' is assigned a value but never used.","'fuseJerusalem' is assigned a value but never used.","'fuseSouth' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-global-assign","no-unsafe-negation"]